trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  azureSubscription: 'prj-bes-7b-e03-connection'  # Nome da sua Service Connection
  appName: 'droops-api-develop-andressa'          # Nome do App Service existente
  mysqlConnectionString: '$(ConnectionStrings.DefaultConnection)'  # Variável segura (definida no Azure DevOps)

steps:
  # Restaurar dependências
  - task: DotNetCoreCLI@2
    displayName: 'Restaurar pacotes'
    inputs:
      command: 'restore'
      projects: 'back/**/*.csproj'

  # Build
  - task: DotNetCoreCLI@2
    displayName: 'Build'
    inputs:
      command: 'build'
      arguments: '--configuration $(buildConfiguration)'
      projects: 'back/**/*.csproj'

  # Testes
  - task: DotNetCoreCLI@2
    displayName: 'Executar testes'
    inputs:
      command: 'test'
      arguments: '--configuration $(buildConfiguration) --logger trx'
      projects: 'back/**/*.csproj'

  # Publicar artefato
  - task: DotNetCoreCLI@2
    displayName: 'Publicar aplicação'
    inputs:
      command: 'publish'
      arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
      projects: 'back/**/*.csproj'
      zipAfterPublish: true

  # Deploy no App Service
  - task: AzureWebApp@1
    displayName: 'Deploy no Azure'
    inputs:
      azureSubscription: $(azureSubscription)
      appName: $(appName)
      package: '$(Build.ArtifactStagingDirectory)/**/*.zip'
      runtimeStack: 'DOTNETCORE|LTS'

  # Executar migrações do MySQL
  - script: dotnet ef database update --project back/
    displayName: 'Aplicar migrações do MySQL'
    env:
      ConnectionStrings__DefaultConnection: $(mysqlConnectionString)